3. Basic Solidity:
• Versioning
• Compiling
• Contract Declaration
• Types & Declaring Variables
o uint256, int256, bool, string, address,
bytes32
• Default Initializations
• Comments
• Functions
• Deploying a Contract
• Calling a public state-changing Function
• Visibility
• Scope
• View & Pure Functions
• Structs
• Intro to Storage
• Arrays - Dynamic & Fixed sized
• Compiler Errors and Warnings
• Memory
• Mappings
• SPDX License
• Recap
*********************************************************************************************************************************************************************************************************************

// SPDX-License-Identifier: MIT
// 1.Versioning
pragma solidity  ^0.8.0;


// 3. Contract Declaration
contract SimpleStorage{

    // 4. Types & Declaring Variables
    // bool favoriteBool = false;
    // string favoriteString = "String";
    // int256 favoriteInt = -5;
    // address favoriteAddress = 0xca8F6cee18b5bc6030451f5Bda4292BaF021B606;
    // bytes32 favoriteBytes = "cat";

    // 5. Default Initializations 0!
    uint256 favoriteNumber;

    struct People{
        uint256 favoriteNumber;
        string name;
    }

    People[] public people;
    mapping(string => uint256) public nameToFavoriteNumber;

    function store(uint256 _favoriteNumber) public {
        favoriteNumber = _favoriteNumber;
    }

    // view
    function retrive() public view returns(uint256) {
        return favoriteNumber;
    }

    // add person
    function addPerson(string memory _name, uint256 _favoriteNumber) public {
        people.push(People(_favoriteNumber, _name));
        nameToFavoriteNumber[_name] = _favoriteNumber;
    }
}
